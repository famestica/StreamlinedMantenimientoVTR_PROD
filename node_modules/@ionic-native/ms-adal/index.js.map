{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/ms-adal/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,MAAM,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6FzF,0BAAiB;;;;eAAhC,MAAM;IACjB,4CAA2B,GAA3B,UACE,SAAiB,EACjB,iBAAwB;QAAxB,kCAAA,EAAA,wBAAwB;QAExB,IAAI,WAAgB,CAAC;QACrB,EAAE,CAAC,CACD,iBAAiB,CAAC,QAAM,CAAC,YAAY,EAAE,EAAE,IAAI,EAAE,QAAM,CAAC,aAAa,EAAE,CAAC;YACtE,IACF,CAAC,CAAC,CAAC;YACD,WAAW,GAAG,IAAI,CAAC,QAAM,CAAC,SAAS,EAAE,CAAC,CAAC,qBAAqB,CAC1D,SAAS,EACT,iBAAiB,CAClB,CAAC;SACH;QACD,MAAM,CAAC,IAAI,qBAAqB,CAAC,WAAW,CAAC,CAAC;KAC/C;;gBAjBF,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACE,MAAM;QARlB,MAAM,CAAC;YACN,UAAU,EAAE,QAAQ;YACpB,MAAM,EAAE,wBAAwB;YAChC,SAAS,EAAE,gBAAgB;YAC3B,IAAI,EAAE,sEAAsE;YAC5E,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACzC,CAAC;OAEW,MAAM,EAiBlB;iBA/GD;;EA8F4B,iBAAiB;SAAhC,MAAM;;;;;IAgCjB,+BAAoB,eAAoB;QAApB,oBAAe,GAAf,eAAe,CAAK;KAAI;IAE5C;;;;;;;;;;;OAWG;;;;;;;;;;;;;IAIH,iDAAiB;;;;;;;;;;;;cACf,WAAmB,EACnB,QAAgB,EAChB,WAAmB,EACnB,MAAe,EACf,oBAA0B;QAE1B,MAAM,CAAC;KACR;IAED;;;;;;;;;OASG;;;;;;;;;;;IAIH,uDAAuB;;;;;;;;;;cACrB,WAAmB,EACnB,QAAgB,EAChB,MAAe;QAEf,MAAM,CAAC;KACR;;QAvDA,gBAAgB;;;;QAGhB,gBAAgB;;;;QAGhB,gBAAgB;;;;QAiBhB,eAAe,CAAC;YACf,YAAY,EAAE,IAAI;SACnB,CAAC;;;;kEASD;;QAYA,eAAe,CAAC;YACf,YAAY,EAAE,IAAI;SACnB,CAAC;;;;wEAOD;gCA5KH;;SAoHa,qBAAqB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CordovaInstance, InstanceProperty, IonicNativePlugin, Plugin, checkAvailability } from '@ionic-native/core';\n\nexport interface AuthenticationResult {\n  accessToken: string;\n  accesSTokenType: string;\n  expiresOn: Date;\n  idToken: string;\n  isMultipleResourceRefreshToken: boolean;\n  status: string;\n  statusCode: number;\n  tenantId: string;\n  userInfo: UserInfo;\n\n  /**\n   * Creates authorization header for web requests.\n   * @returns {String} The authorization header.\n   */\n  createAuthorizationHeader(): string;\n}\n\nexport interface TokenCache {\n  clear(): void;\n  readItems(): Promise<TokenCacheItem[]>;\n  deleteItem(item: TokenCacheItem): void;\n}\n\nexport interface TokenCacheItem {\n  accessToken: string;\n  authority: string;\n  clientId: string;\n  displayableId: string;\n  expiresOn: Date;\n  isMultipleResourceRefreshToken: boolean;\n  resource: string;\n  tenantId: string;\n  userInfo: UserInfo;\n}\n\nexport interface UserInfo {\n  displayableId: string;\n  userId: string;\n  familyName: string;\n  givenName: string;\n  identityProvider: string;\n  passwordChangeUrl: string;\n  passwordExpiresOn: Date;\n  uniqueId: string;\n}\n\n/**\n * @name MS ADAL\n * @description\n * Active Directory Authentication Library (ADAL) plugin.\n * Active Directory Authentication Library ([ADAL](https://docs.microsoft.com/en-us/dotnet/api/microsoft.identitymodel.clients.activedirectory?view=azure-dotnet))\n * plugin provides easy to use authentication functionality for your Apache Cordova apps by taking advantage of\n * Windows Server Active Directory and Windows Azure Active Directory. Here you can find the source code for the library.\n * @usage\n * ```typescript\n * import { MSAdal, AuthenticationContext, AuthenticationResult } from '@ionic-native/ms-adal';\n *\n *\n * constructor(private msAdal: MSAdal) {}\n *\n * ...\n *\n * let authContext: AuthenticationContext = this.msAdal.createAuthenticationContext('https://login.windows.net/common');\n *\n * authContext.acquireTokenAsync('https://graph.windows.net', 'a5d92493-ae5a-4a9f-bcbf-9f1d354067d3', 'http://MyDirectorySearcherApp')\n *   .then((authResponse: AuthenticationResult) => {\n *     console.log('Token is' , authResponse.accessToken);\n *     console.log('Token will expire on', authResponse.expiresOn);\n *   })\n *   .catch((e: any) => console.log('Authentication failed', e));\n *\n *\n * ```\n *\n * @classes\n * AuthenticationContext\n * @interfaces\n * AuthenticationResult\n * TokenCache\n * TokenCacheItem\n * UserInfo\n */\n@Plugin({\n  pluginName: 'MSADAL',\n  plugin: 'cordova-plugin-ms-adal',\n  pluginRef: 'Microsoft.ADAL',\n  repo: 'https://github.com/AzureAD/azure-activedirectory-library-for-cordova',\n  platforms: ['Android', 'iOS', 'Windows']\n})\n@Injectable()\nexport class MSAdal extends IonicNativePlugin {\n  createAuthenticationContext(\n    authority: string,\n    validateAuthority = true\n  ) {\n    let authContext: any;\n    if (\n      checkAvailability(MSAdal.getPluginRef(), null, MSAdal.getPluginName()) ===\n      true\n    ) {\n      authContext = new (MSAdal.getPlugin()).AuthenticationContext(\n        authority,\n        validateAuthority\n      );\n    }\n    return new AuthenticationContext(authContext);\n  }\n}\n\n/**\n * @hidden\n */\nexport class AuthenticationContext {\n  @InstanceProperty\n  authority: string;\n\n  @InstanceProperty\n  validateAuthority: boolean;\n\n  @InstanceProperty\n  tokenCache: any;\n\n  constructor(private _objectInstance: any) {}\n\n  /**\n   * Acquires token using interactive flow. It always shows UI and skips token from cache.\n   *\n   * @param   {String}  resourceUrl Resource identifier\n   * @param   {String}  clientId    Client (application) identifier\n   * @param   {String}  redirectUrl Redirect url for this application\n   * @param   {String}  userId      User identifier (optional)\n   * @param   {String}  extraQueryParameters\n   *                                Extra query parameters (optional)\n   *                                Parameters should be escaped before passing to this method (e.g. using 'encodeURI()')\n   * @returns {Promise} Promise either fulfilled with AuthenticationResult object or rejected with error\n   */\n  @CordovaInstance({\n    otherPromise: true\n  })\n  acquireTokenAsync(\n    resourceUrl: string,\n    clientId: string,\n    redirectUrl: string,\n    userId?: string,\n    extraQueryParameters?: any\n  ): Promise<AuthenticationResult> {\n    return;\n  }\n\n  /**\n   * Acquires token WITHOUT using interactive flow. It checks the cache to return existing result\n   * if not expired. It tries to use refresh token if available. If it fails to get token without\n   * displaying UI it will fail. This method guarantees that no UI will be shown to user.\n   *\n   * @param   {String}  resourceUrl Resource identifier\n   * @param   {String}  clientId    Client (application) identifier\n   * @param   {String}  userId      User identifier (optional)\n   * @returns {Promise} Promise either fulfilled with AuthenticationResult object or rejected with error\n   */\n  @CordovaInstance({\n    otherPromise: true\n  })\n  acquireTokenSilentAsync(\n    resourceUrl: string,\n    clientId: string,\n    userId?: string\n  ): Promise<AuthenticationResult> {\n    return;\n  }\n}\n"]}